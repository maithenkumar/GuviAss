{"ast":null,"code":"var _jsxFileName = \"/home/maithenkumar/Documents/dev/Fullstack_projects/guvi/guvi_assignment/src/Components/TextField.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n\n// import {useFormik} from 'formik';\n\n// import * as yup from 'yup';\n\n// const EmployeeComponent=()=>{\n\n//   const formik=useFormik({\n\n//     initialValues:{\n\n//       Id:'',\n\n//       Name:'',\n\n//       Location:'',\n\n//       Salary:'',\n\n//       EmailId:''\n\n//     },\n\n//     validationSchema: yup.object({\n\n//       Name: yup.string()\n\n//         .max(20, 'Name should not exceed 20 Characters')\n\n//         .required('Please Enter Employee Name'),\n\n//       Location: yup.string()\n\n//         .required('Please Enter Employee Location'),\n\n//       EmailId: yup.string()\n\n//         .email('Invalid email address')\n\n//         .required('Please Enter Email Id'),\n\n//     }),\n\n//     onSubmit:values=>{\n\n//       alert(JSON.stringify(values));\n\n//     }\n\n//   });\n\n//   return (\n\n//     <div>\n\n//       <h2>New Employee Form...</h2>\n\n//   <form onSubmit={formik.handleSubmit}>\n\n//         <p>\n\n//           <label htmlFor=\"Id\">Employee ID : </label>\n\n//           <input type=\"text\" name=\"Id\" {...formik.getFieldProps(\"Id\")} ></input>  \n\n//         </p>\n\n//         <p>\n\n//            <label htmlFor=\"Name\">Employee Name : </label>\n\n//            <input type=\"text\" name=\"Name\" {...formik.getFieldProps(\"Name\")} ></input>\n\n//                   {formik.touched.Name && formik.errors.Name ? <span style={{color:'red'}}>{formik.errors.Name}</span> : null}\n//          </p>\n\n//          <p>\n\n//            <label htmlFor=\"Location\">Employee Location : </label>\n\n//            <input type=\"text\" name=\"Location\" {...formik.getFieldProps(\"Location\")} ></input>\n\n//                   {formik.touched.Location && formik.errors.Location ? <span style={{color:'red'}}>{formik.errors.Location}</span> : null}\n//          </p>\n\n//          <p>\n\n//            <label htmlFor=\"Salary\">Employee Salary : </label>\n\n//            <input type=\"text\" name=\"Salary\" {...formik.getFieldProps(\"Salary\")} ></input>                  \n\n//          </p>\n\n//          <p>\n\n//            <label htmlFor=\"EmailId\">Employee Email ID : </label>\n\n//            <input type=\"text\" name=\"EmailId\" {...formik.getFieldProps(\"EmailId\")} ></input>\n\n//                   {formik.touched.EmailId && formik.errors.EmailId ? <span style={{color:'red'}}>{formik.errors.EmailId}</span> : null}\n//          </p>\n\n//          <button type=\"submit\">Create</button>\n\n//   </form>\n\n//     </div> \n\n//   )\n\n// }\n// export default EmployeeComponent\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YourComponent = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const handleUsernameChange = e => {\n    setUsername(e.target.value);\n  };\n  const handlePasswordChange = e => {\n    setPassword(e.target.value);\n  };\n  const handleConfirmPasswordChange = e => {\n    setConfirmPassword(e.target.value);\n  };\n  const isFormValid = () => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!username.trim()) {\n      setError('Username is required');\n      return false;\n    }\n    if (!emailRegex.test(username.trim())) {\n      setError('Please enter a valid email address');\n      return false;\n    }\n    if (password.length < 8) {\n      setError('Password must be at least 8 characters long');\n      return false;\n    }\n    if (confirmPassword !== password) {\n      setError('Passwords do not match');\n      return false;\n    }\n    setError('');\n    return true;\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (isFormValid()) {\n      // Make a request to the server with the data\n      // ...\n\n      // Clear the form or perform other actions\n      setUsername('');\n      setPassword('');\n      setConfirmPassword('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Username:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: username,\n        onChange: handleUsernameChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: handlePasswordChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Confirm Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: confirmPassword,\n        onChange: handleConfirmPasswordChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s(YourComponent, \"liczFJxMkMvz6dmZ1+xlq7lc9+c=\");\n_c = YourComponent;\nexport default YourComponent;\nvar _c;\n$RefreshReg$(_c, \"YourComponent\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","YourComponent","_s","username","setUsername","password","setPassword","confirmPassword","setConfirmPassword","error","setError","handleUsernameChange","e","target","value","handlePasswordChange","handleConfirmPasswordChange","isFormValid","emailRegex","trim","test","length","handleSubmit","preventDefault","children","className","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","style","color","_c","$RefreshReg$"],"sources":["/home/maithenkumar/Documents/dev/Fullstack_projects/guvi/guvi_assignment/src/Components/TextField.js"],"sourcesContent":["// import React from 'react';\n\n// import {useFormik} from 'formik';\n\n// import * as yup from 'yup';\n\n\n\n// const EmployeeComponent=()=>{\n\n//   const formik=useFormik({\n\n//     initialValues:{\n\n//       Id:'',\n\n//       Name:'',\n\n//       Location:'',\n\n//       Salary:'',\n\n//       EmailId:''\n\n//     },\n\n//     validationSchema: yup.object({\n\n//       Name: yup.string()\n\n//         .max(20, 'Name should not exceed 20 Characters')\n\n//         .required('Please Enter Employee Name'),\n\n//       Location: yup.string()\n\n//         .required('Please Enter Employee Location'),\n\n//       EmailId: yup.string()\n\n//         .email('Invalid email address')\n\n//         .required('Please Enter Email Id'),\n\n//     }),\n\n//     onSubmit:values=>{\n\n//       alert(JSON.stringify(values));\n\n//     }\n\n//   });\n\n//   return (\n\n//     <div>\n\n//       <h2>New Employee Form...</h2>\n\n//   <form onSubmit={formik.handleSubmit}>\n\n//         <p>\n\n//           <label htmlFor=\"Id\">Employee ID : </label>\n\n//           <input type=\"text\" name=\"Id\" {...formik.getFieldProps(\"Id\")} ></input>  \n\n//         </p>\n\n//         <p>\n\n//            <label htmlFor=\"Name\">Employee Name : </label>\n\n//            <input type=\"text\" name=\"Name\" {...formik.getFieldProps(\"Name\")} ></input>\n\n//                   {formik.touched.Name && formik.errors.Name ? <span style={{color:'red'}}>{formik.errors.Name}</span> : null}\n//          </p>\n\n//          <p>\n\n//            <label htmlFor=\"Location\">Employee Location : </label>\n\n//            <input type=\"text\" name=\"Location\" {...formik.getFieldProps(\"Location\")} ></input>\n\n//                   {formik.touched.Location && formik.errors.Location ? <span style={{color:'red'}}>{formik.errors.Location}</span> : null}\n//          </p>\n\n//          <p>\n\n//            <label htmlFor=\"Salary\">Employee Salary : </label>\n\n//            <input type=\"text\" name=\"Salary\" {...formik.getFieldProps(\"Salary\")} ></input>                  \n\n//          </p>\n\n//          <p>\n\n//            <label htmlFor=\"EmailId\">Employee Email ID : </label>\n\n//            <input type=\"text\" name=\"EmailId\" {...formik.getFieldProps(\"EmailId\")} ></input>\n\n//                   {formik.touched.EmailId && formik.errors.EmailId ? <span style={{color:'red'}}>{formik.errors.EmailId}</span> : null}\n//          </p>\n\n//          <button type=\"submit\">Create</button>\n\n//   </form>\n\n//     </div> \n\n//   )\n\n// }\n// export default EmployeeComponent\n\nimport React, { useState } from 'react';\n\nconst YourComponent = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n\n  const handleUsernameChange = (e) => {\n    setUsername(e.target.value);\n  };\n\n  const handlePasswordChange = (e) => {\n    setPassword(e.target.value);\n  };\n\n  const handleConfirmPasswordChange = (e) => {\n    setConfirmPassword(e.target.value);\n  };\n\n  const isFormValid = () => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n    if (!username.trim()) {\n      setError('Username is required');\n      return false;\n    }\n\n    if (!emailRegex.test(username.trim())) {\n      setError('Please enter a valid email address');\n      return false;\n    }\n\n    if (password.length < 8) {\n      setError('Password must be at least 8 characters long');\n      return false;\n    }\n\n    if (confirmPassword !== password) {\n      setError('Passwords do not match');\n      return false;\n    }\n\n    setError('');\n    return true;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (isFormValid()) {\n      // Make a request to the server with the data\n      // ...\n\n      // Clear the form or perform other actions\n      setUsername('');\n      setPassword('');\n      setConfirmPassword('');\n    }\n  };\n\n  return (\n    <div>\n      <form className=\"form\"  onSubmit={handleSubmit}>\n        <label>Username:</label>\n        <input type=\"text\" value={username} onChange={handleUsernameChange} />\n        {error && <p style={{ color: 'red' }}>{error}</p>}\n\n        <label>Password:</label>\n        <input type=\"password\" value={password} onChange={handlePasswordChange} />\n\n        <label>Confirm Password:</label>\n        <input type=\"password\" value={confirmPassword} onChange={handleConfirmPasswordChange} />\n\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default YourComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}